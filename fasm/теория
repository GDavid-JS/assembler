https://habr.com/ru/articles/559880/

;формат входного файла
format MZ - EXE-файл НО под MS-DOS
format PE - EXE-файл под Windows, аналогично format PE GUI 4.0
format PE64 - EXE-файл под Windows, 64 битное приложение.
format PE GUI 4.0 - EXE-файл под Windows, графическое приложение.
format PE Console - EXE-файл под Windows, консольная программа. (просто подключается заранее консоль)
format PE Native - драйвер
format PE DLL - DLL-файл Windows, поясню позднее.
format COFF - OBJ-файл Linux
format MS COFF - аналогично предыдущему
format ELF - OBJ-файл для gcc (Linux)
format ELF64 - OBJ-файл для gcc (Linux), 64-bit



;точка входа (адрес откуда процессор выолпрняте прогармму)
entry start
; Подключаемые модули
include 'win32.inc'
include '{fasmw_path}\vf\.inc'
;Секция кода
section '.code' code readable executable
    start:
;Секция данных
section '.data' data readable

Секции (сегменты) позволяют логически разделить программу
Название должно быть меньше 8 символов

section '.имя секции' [флаги секции]

;Секция таблицы импорта
section '.data' import data readable writeable
    ;импортируемые библиотеки и псевдонимы
    library kernel, 'KERNEL.DLL',\
    user, 'USER32.DLL'
    ;импортируемые фунцкии из kernel32.dll и псевдонимы
    import kernel,\
    GetModuleHandle, 'GetModuleHandleA',\
    ExitProcess, 'ExitProcess'
    ;GetModuleHandleA - имя функции в файле
    ;GetModuleHandle - имя функции в текущем файле

    ; импортируемые функции из user32.dll и псевдонимы для них
    import user,\
    MessageBox, 'MessageBoxA'
    
code - секция кода
data - секция данных
    флаги для секции data
    export - таблица экспорта
    import - таблица импорта
    resource - ресурсы
readable - секция,данные которые доступны для чтения
writeable - секция, доступная на запись
executable - секция, доступная на исполнение
shateable - совместно используемая секция
discardable - секция может бы ть выглужена из памяти
notpageable - не подвергается страничному преобразованию

Флаги "readable writeable" говорят то что эта секция может читаться кем-то и записываться кем-то.


хранение данных
1. память
2. регистр
3. стек

регистры
1. Общего пользования
2. Сегментные регистры
3. Служебные регистры (используемые процессором)
4. Отладочные

1. Общего пользования
rax\eax\ax\ah\al - (ax - младшее слово, ah - старший байт, al - младший байт)
rbx\ebx\bx\bh\bl
rdx\edx\dx\dh\dl
rcx\ecx\cx\ch\cl
rsi\esi\si
rdi\edi\di

2. Сегментные регистры
ss
cs
ds

3. Регистры для работы со стеком
bp - адрес начала фрейма или стека
sp или ESP - указатель вершины стека

4. Флаговые регистры
Флаговые регистры являются частью архитектуры процессора и содержат битовые флаги, которые отражают результаты предыдущих арифметических, логических и других операций. Флаговые регистры позволяют программистам проверять состояние процессора и принимать решения на основе результатов операций.
CF,ZF,OF,SF,DF,PF,IF,TF

5.Указатель команд
ip, ...

память
У каждого байта есть адрес
Размер адреса слово
Каждому процессу выделяется 4гб виртуальной памяти
В памяти выделенной процессу хранятся данные, код прогарммы, и библиотеки используемые программой
Виртуальные адреса пересчитываются в физические

стек
pop - извлечь значение из стека лежащие на вершине
popa / popad - Восстановить из стека регистры
popf / popfd - Восстановить из стека регистр флагов
push - поместить значение в вершину стека
pusha / pushad - поместить в стек значения регистров
pushf / pushfd - поместить в стек значения регистра флагов

размер данных в стеке 4 байта

Размер данных   Объявление данных   Резервирование данных
1               db                  rb
2               dw, du              rw
4               dd                  rd
6               dp, df              rp, rf
8               dq                  rq

var db ? - вопрос аналог резервирования
var db 11b - объявление переменной в двоичном формате

mov приемник_данных, источник_данных
mov eax, ebx
mov eax, 10

mov адрес_памяти, источник_данных
В ebx хранится адрес памяти
[адрес] - извлечение данных из адреса
mov [ebx], eax

word[]
dword[]
и тд явно указывают колво извелкаемых данных

Производит обмен данным между регистрами или ячейками памяти
xchg операнд1, операнд2

Указатель - адрес в памяти по которому хранятся данные
После компиляции метки данных заменяются указателями на эти данные
Получение адреса данных
lea регистр, [метка]

;Константы аналогичны макросам define в c++
NULL = 0

;Увеличивает на единицу
inc eax
inc byte[someData]
;Уменьшает на единицу
dec eax
dec byte[someData]
;Умножает на минус один (меняет знак на противоположный)
neg eax

;add - складывает числа
add eax, 3
add eax, ebx
add dword[someData], eax
add ebx, dword[someData]
; adc - складывает числа с учетом флага переноса
; sub - вычитание


;mul, imul - умножение

mov ax, 10
mov bx, 10
mul bx

Размер операндов        Второй операнд      Результат
Байт                    al                  ax
Слово                   ax                  dx:ax
Двойное слово           eax                 edx:eax

mov ecx, 10
imul ecx, 20
; Результат в ecx

div, idiv - деление также как и mul,imul
; также добавлятся остаток от деления который хранится в ah/dx/edx

Команды сдвига
Сдвиг на один бит влево равнозначен умножению на 2, сдвиг на один бит вправо равнозначен делению на 2

команда операнд1, операнд2
операнд1 - регистр или память
операнд2 - колво бит на которое будем двигать

Логический сдвиг(над беззнаковыми числами) влево применяется при операциях над беззнаковыми целыми числами.
В случае отбрасывания старшей единицы устанавливается флаг переноса cf

Арифметический сдвиг (для чисел со знаком)

Циклический сдвиг
При этом сдвиге уходящий бит появляется на месте появившегося свободного на другом конце числа.

rcl - циклический сдвиг влево через перенос. Справа вписывается значение флага CF
rcr - циклический сдвиг вправо через перенос. Слева вписывается значение флага CF
rol - циклический сдвиг влево.
ror - циклический сдвиг вправо.
sal - Аналогичная операция shl, но в отличие от нее в том случае, если операнд меняет знак, взводит флаг OF
sar - арифметический сдвиг вправо.
shl - логический сдвиг влево. Содержимое операнда сдвигается влево. Выдвигаемый бит переходит во флаг cf. Справа в позицию младших бит записываются нули.
shr - Логический сдвиг вправо. Содержимое операнда сдвигается вправо. Выдвигаемый бит переходит во флаг cf. Справа в позицию старшего бита записывается нуль


Логический тип данных

команда операнд1, операнд2
or, and, xor, not

test - тоже что and. Результат никуда не записывается. Команда влияет только на флаги.
В зависимости от реузльтата могут быть изменены флаги ZF, SF, PF
Инструкция TEST всегда сбрасывает флаги OF и CF

mov eax, 110b
test eax, 101b
;если результат test не 0, то в флаг ZF кладется значение 0

jz metka - срабатывает если флаг ZF установлен

call название_функции - вызов функции

mov cx, 10
metka:
    loop metka
Цикл в 10 итераций

Условные переходы
cmp операнд1, операнд2 - сравнение элементов
je metka - переход на метку если операнд1 == операнд2
Безусловный переход
jmp metka



