память
регистры - ячейки памяти которые находятся на процессоре (самые быстрые, мало памяти)
кэш - хранилише для часто используемых процессором данных, состоят из нескольких уровней(быстрые, и больше памяти чем у регистров)
оперативная память - хранится вся программа (средняя скороть, средняя память)
внешнии накопитили - жесткие диски, ssd, флешки и тд (медленная скорость, много памяти)

оперативная память

Байт - минимальная ячейка (актета) адресации
Существует оперативная память в которой размер ячейки равен размеру машинного слова

Поскольку в регистре можно хранить ограниченного размера числа, то и размер оперативной памяти необходимо также ограничивать
К примеру в 32 битном регистре можно хранить 2^32 чисел. Это означает что в регистре нельзя хранить адрес памяти которая больше числа 2^32 (4 гб). Если размер регистра равен 32 бита, то он не сможет обращаться к памяти которая в 8гб поскольку регистр не может хранить в себе такой адрес памяти. Можно компенсировать за счет другого регистра в теории, но это будет не кросплатформенно и не производительно

Порядок расположения данных в оперативной памяти
big endian (прямой порядок, слева на право)
little endian (обратный порядок, справа на лево)

Выравнивание
В памяти данные должны хранится по адресам кратным размеру слова
Статический массив инициализируется на стеке
Динамический на куче

Ручное управление памятью
С
С++
Автоматическое управление памятью
python
java
c#
и тд

кэш
в кэше данные хранятся также как в оперативной памяти
кэш состоит из двух частей
1. Контролер - управляет кэн память
2. Кэш память

Процессор делает запрос контролеру на наличие данных к еэш памяти если есть данные то контролер отдает их если нету то процессор обращается к оперативной памяти
Кэш строка(кэш линия) хранит в себе данные и адрес на данные в оперативной памяти (как правило размер строки составляет 64 байта)

Многоуровневый кэш - состоит из нескольких блоков кэша. Каждый блок кэша принадлежит отдельному ядру процессора
Кэш работает автоматически поэтому на него невозможно повлиять

Стэк


Процессор
Архитектуры
x86 - используется в ПК и серверах
ARM - в смартфонах и планшетах
AVR - в микроконтроллерах встроенных систем (автомобиль, телевизор и тд)

Разрядность - величина которая определяет размер машинного слова

Модель              Разрядность
с 8086 по 80286     16 бита
с 80386             32 бита (x86)
AMD64==EM64T        64 бита (x86-64)
EM64T - (intel)лицензированная у AMD64 архитектура

Регистры - маленькие ячейки памяти, расположенные на процессоре
Регистры общего назначения, регистры специального назначения

После включения коммпьютера процессор начинает выполнять команды по какому-то адресу памяти. По этому адресу располагается bios. Задача bios найти на жестком диске программу и передать ей управление. Это программой является операционная система. Далее после запуска программы операционная система выделяет под нее память и указывает процессору с помощью регистра ip где откуда должна выполняться следующая команда.

Режим работы адресов
1. Реальный режим - режим в который процессор переходит сразу после включения компьютера. Адреса являются реальными и не требуют никакой трансляции. (16-битный режим)
2. Защищенный режим - режим в который можно перейти только из режима реальных адресов. Режим означает что обеспечивается защита данных между программи, благодаря разделению приложений на разные уровни привилегии 0-3 (32-битный режим)
3. 64 разрядный режим.

Уровни привилегий (каждый уровень содержит ограничения предыдущего)
0 уровень - операционная система (привилегированный)
1 уровень - редко испольузется
2 уровень - редко испольузется
3 уровень - пользовательский

Режим реальных адресов
Вся память делится на сегменты
логический адрес - (адрес начала сегмента):(смещение в сегменте)
физический адрес - (адрес начала сегмента) << 4:(смещение в сегменте)
сдвиг на 4бита

Защищенный режим
каждый сегмент занимает от 0 до 4гб. ОС создает иллюзию что процесс имеет доступ ко всей памяти. В этом режиме происходит механизм трансляции виртуальных адресов в физические. Программы работают в виртуальном адресном пространстве.
Логический адрес - (селектор дескриптора):(смещение сегмента)

селектор дескриптора - (уровень привилегий) (начальный адрес сегмента) (уровень привилегий) (размер сегмента)
виртуальный адрес - (адрес начала сегмента):(смещение в сегменте)

Итог
Есть логический адрес который либо преобразуется в физический, либо преобразуется в виртуальной а потом преобразуется в физический

Прерывание - сигнал процессору о том, чтобы он прервал, выполнение текущей программы и передал управление специальной функции-обработчику прерываний

Функции обработчики - программы которые постоянно находятся в памяти и могут вызываться в любое время. Получив сигнал процессор передает управление обработчику прерывания. Сначала сохраняется текущее состояние процесса в регистрах а потом происходит переход к другой функции обработчику

Три основных вида прерываний
1. Прогарммные
2. Аппаратные
3. Исключения

3. Исключения - генерирует сам процессор при попытке прогарммы нарушить ограничение или при возникновении ошибки в программе
2. Аппаратные - генерируются контроллером прерываний - связующее звено между внешними устрояствами и процессором. Прерываний обрабатываются согласно приоритетам что позволяет избегать коллизий - которые появляются при поступлении сигналов от нескольких источников
1. Программные - прерывания которые генерирует сам программист. К примеру командой int в операционной системе MSDOS. В windows нельзя вызывать прерывания напрямую вместо этого есть системные функции которые предоставляет операционная система.


программа - совокупность процессов. Процессы - совокупность потоков
Многозадачность - абстрактное понятие когда на одном ядре сменяется несколько процессов одновременно
Многопроцесорность когда на нескольких ядрах реализуется много процессов или потоков

Многопоточность, многопроцессорность
Многопоточность - выделяется область памяти внутри процесса, так что поток имеет доступ к данным процесса
Многопроцессорность - выделение отдельной области данных в памяти.

Для процессора нету разницы между потоком и процессом


Стек - область оперативной памяти для хранения временных данных. Орагинзована по принципу LIFO. Остальная область памяти называется кучей.
sp - указатель вершины стека
bp - адрес начала фрейма

jmp, call, ret
jmp - переход на другой адрес
call - заносит в стек адрес возврата после чего происходит переход по указанному адресу
Командой call мы помещаем в стек адрес в который будет отправляться значение возвращаемое функцией
Далее в стек помещается адрес регистра bp в котором хранится значение старого указателя на начало предыдущего фрейма или начало стека
ret - выходит из функции и возвращается к начальному элементу
Команда ret - извлекает из стека адреса начала команды которую надо испольнить


У каждой функции есть фрейм
Фрейм - место в стеке. Внутри функции есть локальные переменные
Фрейм - считай что виртульаная память внутри стека. Старые значения sp и bp сохраняются в стеке, после чего значения этих регистров приравниваются и указывают на последний элемент настоящего стека, создавая как бы виртуальный стек, внутри которого есть локальные переменные.

Бесконечная рекурсия это бесконечное переполнение стека потмоу что с каждым вызовов функции в стек будут заноситься данные о sp, bp

Параметры передаются в функцию через стек


В python потоки работают на уровне интерпретатора, то есть внутри одного процесса в потоке python интерпретатор переключается между пайтоновскими байт кодами. 